# GitHub Workflow Rules

## Pull Request (PR) 관리

### PR 생성 규칙
1. **브랜치 명명 규칙**
   - `feature/기능명`: 새로운 기능 개발
   - `fix/버그명`: 버그 수정
   - `refactor/리팩토링명`: 코드 리팩토링
   - `docs/문서명`: 문서 수정
   - `test/테스트명`: 테스트 추가/수정

2. **PR 제목 규칙**
   - `feat: 새로운 기능 추가`
   - `fix: 버그 수정`
   - `refactor: 코드 리팩토링`
   - `docs: 문서 수정`
   - `test: 테스트 추가/수정`
   - `chore: 기타 변경사항`

3. **PR 설명 템플릿**
   ```
   ## 변경사항
   - [ ] 기능 추가
   - [ ] 버그 수정
   - [ ] 리팩토링
   - [ ] 문서 수정

   ## 상세 설명
   변경사항에 대한 상세한 설명을 작성해주세요.

   ## 테스트
   - [ ] 단위 테스트 통과
   - [ ] 통합 테스트 통과
   - [ ] 수동 테스트 완료

   ## 체크리스트
   - [ ] 코드 리뷰 완료
   - [ ] 테스트 코드 작성
   - [ ] 문서 업데이트
   ```

### PR 라벨 규칙
- `feature`: 새로운 기능
- `bug`: 버그 수정
- `enhancement`: 기능 개선
- `documentation`: 문서 수정
- `refactor`: 코드 리팩토링
- `test`: 테스트 관련
- `chore`: 기타 변경사항
- `priority: high`: 높은 우선순위
- `priority: medium`: 중간 우선순위
- `priority: low`: 낮은 우선순위

## Issue 관리

### Issue 생성 규칙
1. **Issue 제목 규칙**
   - `[Bug] 버그 설명`
   - `[Feature] 기능 요청`
   - `[Enhancement] 개선 요청`
   - `[Documentation] 문서 요청`

2. **Issue 설명 템플릿**
   ```
   ## 문제/요청 사항
   상세한 설명을 작성해주세요.

   ## 예상 동작
   어떻게 동작해야 하는지 설명해주세요.

   ## 현재 동작
   현재 어떻게 동작하는지 설명해주세요.

   ## 환경 정보
   - OS: 
   - Python 버전:
   - 브라우저 (프론트엔드 관련):

   ## 추가 정보
   스크린샷, 로그 등 추가 정보가 있다면 첨부해주세요.
   ```

### Issue 라벨 규칙
- `bug`: 버그 리포트
- `feature`: 기능 요청
- `enhancement`: 개선 요청
- `documentation`: 문서 요청
- `help wanted`: 도움 요청
- `good first issue`: 초보자용 이슈
- `priority: high`: 높은 우선순위
- `priority: medium`: 중간 우선순위
- `priority: low`: 낮은 우선순위

## 코드 리뷰 규칙

### 리뷰어 할당
- 백엔드 관련: 프로젝트 메인테이너
- 프론트엔드 관련: 프로젝트 메인테이너
- 전체적인 아키텍처: 프로젝트 메인테이너

### 리뷰 체크리스트
- [ ] 코드 품질 검토
- [ ] 테스트 코드 검토
- [ ] 보안 검토
- [ ] 성능 검토
- [ ] 문서화 검토

## 자동화 규칙

### GitHub Actions
1. **테스트 자동 실행**: 모든 PR에서 테스트 실행
2. **코드 품질 검사**: linting, formatting 검사
3. **자동 라벨링**: PR/Issue 타입에 따른 자동 라벨링
4. **자동 할당**: PR/Issue 자동 할당
5. **자동 코멘트**: 템플릿 기반 자동 코멘트

### 브랜치 보호 규칙
- `main` 브랜치 보호 활성화
- PR 리뷰 필수
- 테스트 통과 필수
- 최신 상태 유지 필수
description:
globs:
alwaysApply: true
---
