---
alwaysApply: true
---

# 구현 항목

## 1. LangGraph Agent 기본 구조 구현
- Agent 상태 정의 (AgentState)
- React Agent 생성 및 설정
- 기본 그래프 구조 구현

## 2. Gemini LLM 연동
- ChatGoogleGenerativeAI 모델 설정
- Gemini-2.5-flash-preview-05-20 모델 사용
- 환경 변수 설정 (GOOGLE_API_KEY)

## 3. DuckDuckGo Search Tool 연동
- DuckDuckGoSearchRun 도구 구현
- 웹 검색 기능 설정
- Tool 호출 로직 구현

## 4. React Agent 워크플로우 구현
- 모델 호출 노드 (call_model)
- 도구 실행 노드 (tool_node)
- 조건부 엣지 설정 (should_continue)
- 그래프 컴파일 및 실행

## 5. Agent 실행 및 테스트
- Agent 실행 함수 구현
- 스트리밍 응답 처리
- 에러 핸들링 및 로깅

# 기술 스택 및 라이브러리

## Agent 프레임워크
- **LangGraph**: Agent 워크플로우 프레임워크
- **create_react_agent**: React Agent 생성 함수
- **StateGraph**: 상태 기반 그래프 구현

## LLM 모델
- **ChatGoogleGenerativeAI**: Gemini 모델 통합
- **Gemini-2.5-flash-preview-05-20**: 최신 Gemini 모델

## 도구 (Tools)
- **DuckDuckGoSearchRun**: 웹 검색 도구
- **ToolNode**: 도구 실행 노드

## 메시지 및 상태 관리
- **AgentState**: Agent 상태 정의
- **BaseMessage**: 기본 메시지 타입
- **ToolMessage**: 도구 메시지 타입

## 모니터링
- **LangSmith**: Agent 실행 모니터링
- **LANGSMITH_API_KEY**: 모니터링 API 키

# 개발 계획

## 1단계: 기본 Agent 구조 설정
1. backend/app/agent 폴더 생성
2. AgentState 클래스 정의
3. 기본 React Agent 생성 함수 구현

## 2단계: Gemini LLM 연동
1. ChatGoogleGenerativeAI 모델 초기화
2. 환경 변수 설정 (GOOGLE_API_KEY)
3. 모델 호출 노드 구현

## 3단계: DuckDuckGo Search Tool 구현
1. DuckDuckGoSearchRun 도구 설정
2. 도구 실행 노드 구현
3. 도구 호출 로직 구현

## 4단계: React Agent 워크플로우 구현
1. 모델 호출 노드 (call_model) 구현
2. 도구 실행 노드 (tool_node) 구현
3. 조건부 엣지 함수 (should_continue) 구현
4. StateGraph 생성 및 컴파일

## 5단계: Agent 실행 함수 구현
1. Agent 실행 함수 (invoke_agent) 구현
2. 스트리밍 응답 처리
3. 에러 핸들링 구현

## 6단계: FastAPI 연동
1. Agent API 엔드포인트 구현
2. 요청/응답 모델 정의
3. Agent 호출 로직 연동

## 7단계: 테스트 및 검증
1. Agent 단위 테스트 작성
2. 통합 테스트 구현
3. 성능 및 안정성 검증

# Context Files
- [development-tasks.mdc](mdc:development-tasks.mdc)
- [tech-stack.mdc](mdc:tech-stack.mdc)
- [task2-plan.mdc](mdc:task2-plan.mdc)


5. **FastAPI 통합**
   - Agent를 FastAPI 엔드포인트에 연결
   - 요청/응답 처리 로직 구현

# 구현 항목

## 1. LangGraph Agent 기본 구조 구현
- Agent 상태 정의 (AgentState)
- React Agent 생성 및 설정
- 기본 그래프 구조 구현

## 2. Gemini LLM 연동
- ChatGoogleGenerativeAI 모델 설정
- Gemini-2.5-flash-preview-05-20 모델 사용
- 환경 변수 설정 (GOOGLE_API_KEY)

## 3. DuckDuckGo Search Tool 연동
- DuckDuckGoSearchRun 도구 구현
- 웹 검색 기능 설정
- Tool 호출 로직 구현

## 4. React Agent 워크플로우 구현
- 모델 호출 노드 (call_model)
- 도구 실행 노드 (tool_node)
- 조건부 엣지 설정 (should_continue)
- 그래프 컴파일 및 실행

## 5. Agent 실행 및 테스트
- Agent 실행 함수 구현
- 스트리밍 응답 처리
- 에러 핸들링 및 로깅

# 기술 스택 및 라이브러리

## Agent 프레임워크
- **LangGraph**: Agent 워크플로우 프레임워크
- **create_react_agent**: React Agent 생성 함수
- **StateGraph**: 상태 기반 그래프 구현

## LLM 모델
- **ChatGoogleGenerativeAI**: Gemini 모델 통합
- **Gemini-2.5-flash-preview-05-20**: 최신 Gemini 모델

## 도구 (Tools)
- **DuckDuckGoSearchRun**: 웹 검색 도구
- **ToolNode**: 도구 실행 노드

## 메시지 및 상태 관리
- **AgentState**: Agent 상태 정의
- **BaseMessage**: 기본 메시지 타입
- **ToolMessage**: 도구 메시지 타입

## 모니터링
- **LangSmith**: Agent 실행 모니터링
- **LANGSMITH_API_KEY**: 모니터링 API 키

# 개발 계획

## 1단계: 기본 Agent 구조 설정
1. backend/app/agent 폴더 생성
2. AgentState 클래스 정의
3. 기본 React Agent 생성 함수 구현

## 2단계: Gemini LLM 연동
1. ChatGoogleGenerativeAI 모델 초기화
2. 환경 변수 설정 (GOOGLE_API_KEY)
3. 모델 호출 노드 구현

## 3단계: DuckDuckGo Search Tool 구현
1. DuckDuckGoSearchRun 도구 설정
2. 도구 실행 노드 구현
3. 도구 호출 로직 구현

## 4단계: React Agent 워크플로우 구현
1. 모델 호출 노드 (call_model) 구현
2. 도구 실행 노드 (tool_node) 구현
3. 조건부 엣지 함수 (should_continue) 구현
4. StateGraph 생성 및 컴파일

## 5단계: Agent 실행 함수 구현
1. Agent 실행 함수 (invoke_agent) 구현
2. 스트리밍 응답 처리
3. 에러 핸들링 구현

## 6단계: FastAPI 연동
1. Agent API 엔드포인트 구현
2. 요청/응답 모델 정의
3. Agent 호출 로직 연동

## 7단계: 테스트 및 검증
1. Agent 단위 테스트 작성
2. 통합 테스트 구현
3. 성능 및 안정성 검증

# Context Files
- [development-tasks.mdc](mdc:development-tasks.mdc)
- [tech-stack.mdc](mdc:tech-stack.mdc)
- [task2-plan.mdc](mdc:task2-plan.mdc)


5. **FastAPI 통합**
   - Agent를 FastAPI 엔드포인트에 연결
   - 요청/응답 처리 로직 구현

